import argparse

import os
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from exp_name_utils import augment_df

parser = argparse.ArgumentParser()
parser.add_argument('--data_prefix', type=str, required=True,
                    help="Path prefix to the files containing the estimated/actual memory "
                    "data, generated by collect_memory_estimation_accuracy.py")
parser.add_argument('--out_dir', type=str, required=True,
                    help="Path to the directory where the output plots "
                    "will be saved")

args = parser.parse_args()

estimated_memory = pd.read_csv(args.data_prefix + "_memory_estimated.csv", low_memory=False)
actural_memory = pd.read_csv(args.data_prefix + "_memory_actual.csv", low_memory=False)

max_actual_memory = actural_memory.groupby(["exp_name", "spec_name", "dr", "iteration"]).agg({'memory':'max'}).reset_index()
estimated_memory = estimated_memory.rename(columns={"dpg":"dr"})

joined = max_actual_memory.merge(estimated_memory, on=["exp_name", "spec_name", "dr", "iteration"], how="inner", suffixes=("_actual", "_estimated"))
joined = augment_df(joined)
joined = joined[joined["iteration"] > 30] # remove warmup iterations
joined["Model"] = joined["model"]

t5_joined = joined[joined["Model"] == "T5"]
gpt_joined = joined[joined["Model"] == "GPT"]

t5_actual = t5_joined["memory_actual"].to_numpy()
t5_estimated = t5_joined["memory_estimated"].to_numpy()
gpt_actual = gpt_joined["memory_actual"].to_numpy()
gpt_estimated = gpt_joined["memory_estimated"].to_numpy()

t5_avg_error = (abs(t5_actual - t5_estimated) / t5_actual)
gpt_avg_error = (abs(gpt_actual - gpt_estimated) / gpt_actual)

fig, ax = plt.subplots(1, 1, figsize=(4, 4))

ax = sns.lineplot(x=range(17500, 40000), y=range(17500, 40000), color="red", ax=ax, alpha=0.5)
ax = sns.histplot(data=joined, x="memory_actual", y="memory_estimated", bins=100, hue="Model", stat="density", alpha=0.9)
ax.set_xlim(17500, 40000)
ax.set_ylim(17500, 40000)

l = ax.get_legend()
l.set(bbox_to_anchor=(1, 0.3))

for item in (ax.get_xticklabels() + ax.get_yticklabels()):
    item.set_fontsize(11)
for item in [ax.title, ax.xaxis.label, ax.yaxis.label]:
    item.set_fontsize(12)
ax.set_xlabel("Measured Peak Memory (MB)")
ax.set_ylabel("Estimated Peak Memory (MB)")
ax.text(18000, 38500, f"Mean Percentage Error:", fontsize=12)
ax.text(18000, 37250, f"T5: {t5_avg_error.mean() * 100:.2f}%", fontsize=12)
ax.text(18000, 36000, f"GPT: {gpt_avg_error.mean() * 100:.2f}%", fontsize=12)

plt.setp(ax.get_legend().get_texts(), fontsize='12') # for legend text
plt.setp(ax.get_legend().get_title(), fontsize='12') # for legend title

fig.savefig(os.path.join(args.out_dir, "fig18_b.pdf"), bbox_inches="tight")